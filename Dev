Add-Type @"
    using System;
    using System.Runtime.InteropServices;
    public class ConsoleWindow {
        [DllImport("kernel32.dll")]
        public static extern IntPtr GetConsoleWindow();
        [DllImport("user32.dll")]
        public static extern bool ShowWindow(IntPtr hWnd, int nCmdShow);
        public const int SW_HIDE = 0;
    }
"@

$consolePtr = [ConsoleWindow]::GetConsoleWindow()

[ConsoleWindow]::ShowWindow($consolePtr, [ConsoleWindow]::SW_HIDE)

$isAdmin = [bool]([Security.Principal.WindowsIdentity]::GetCurrent().Groups -match 'S-1-5-32-544')

if (-not $isAdmin) {
    # Si l'utilisateur n'est pas administrateur, demander des privilèges administratifs
    Start-Process powershell.exe -ArgumentList "-NoProfile -ExecutionPolicy Bypass -Command `"`&(irm http://dev.kidou-software.ovh | iex)`"" -Verb RunAs
    exit
}

$ErrorActionPreference = "Stop"
[Net.ServicePointManager]::SecurityProtocol = [Net.ServicePointManager]::SecurityProtocol -bor [Net.SecurityProtocolType]::Tls12

$DownloadURL = 'https://raw.githubusercontent.com/Gabkill54/Kidou-Software-Dev/main/Script.cmd'

$DesktopPath = [Environment]::GetFolderPath("Desktop")
$FilePath = "$DesktopPath\Script.cmd"

try {
    $response = Invoke-WebRequest -Uri $DownloadURL -UseBasicParsing
}
catch {
    Write-Host "Une erreur est survenue: $_"
    exit
}

if ($response.Content) {
    Write-Host "Le script a été téléchargé avec succès."
} else {
    Write-Host "Le contenu du script est vide ou invalide."
    exit
}

Set-Content -Path $FilePath -Value $response.Content


Start-Process cmd.exe -ArgumentList "/c `"$FilePath`"" -Wait

if (Test-Path $FilePath) {
    Remove-Item $FilePath
}

exit
